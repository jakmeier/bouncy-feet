// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { GetStaticWebVideosByFilenameData, GetStaticWebVideosByFilenameResponses, GetStaticWebVideosByFilenameErrors, GetStaticWebVideosPrivateByFilenameData, GetStaticWebVideosPrivateByFilenameResponses, GetStaticWebVideosPrivateByFilenameErrors, GetStaticStreamingPlaylistsHlsByFilenameData, GetStaticStreamingPlaylistsHlsByFilenameResponses, GetStaticStreamingPlaylistsHlsByFilenameErrors, GetStaticStreamingPlaylistsHlsPrivateByFilenameData, GetStaticStreamingPlaylistsHlsPrivateByFilenameResponses, GetStaticStreamingPlaylistsHlsPrivateByFilenameErrors, GetDownloadVideosGenerateByVideoIdData, GetDownloadVideosGenerateByVideoIdResponses, GetSyndicatedCommentsData, GetSyndicatedCommentsResponses, GetSyndicatedCommentsErrors, GetSyndicatedVideosData, GetSyndicatedVideosResponses, GetSyndicatedVideosErrors, GetSyndicatedSubscriptionVideosData, GetSyndicatedSubscriptionVideosResponses, GetSyndicatedSubscriptionVideosErrors, GetVideosPodcastFeedData, GetVideosPodcastFeedResponses, GetVideosPodcastFeedErrors, GetAccountData, GetAccountResponses, GetAccountErrors, GetAccountVideosData, GetAccountVideosResponses, GetAccountFollowersData, GetAccountFollowersResponses, GetAccountsData, GetAccountsResponses, GetConfigData, GetConfigResponses, GetAboutData, GetAboutResponses, DelCustomConfigData, DelCustomConfigResponses, GetCustomConfigData, GetCustomConfigResponses, PutCustomConfigData, PutCustomConfigResponses, PutCustomConfigErrors, PostApiV1ConfigInstanceBannerPickData, PostApiV1ConfigInstanceBannerPickResponses, PostApiV1ConfigInstanceBannerPickErrors, DeleteApiV1ConfigInstanceBannerData, DeleteApiV1ConfigInstanceBannerResponses, PostApiV1ConfigInstanceAvatarPickData, PostApiV1ConfigInstanceAvatarPickResponses, PostApiV1ConfigInstanceAvatarPickErrors, DeleteApiV1ConfigInstanceAvatarData, DeleteApiV1ConfigInstanceAvatarResponses, PostApiV1ConfigInstanceLogoLogoTypePickData, PostApiV1ConfigInstanceLogoLogoTypePickResponses, PostApiV1ConfigInstanceLogoLogoTypePickErrors, DeleteApiV1ConfigInstanceLogoLogoTypeData, DeleteApiV1ConfigInstanceLogoLogoTypeResponses, GetApiV1CustomPagesHomepageInstanceData, GetApiV1CustomPagesHomepageInstanceResponses, GetApiV1CustomPagesHomepageInstanceErrors, PutApiV1CustomPagesHomepageInstanceData, PutApiV1CustomPagesHomepageInstanceResponses, PostApiV1JobsPauseData, PostApiV1JobsPauseResponses, PostApiV1JobsResumeData, PostApiV1JobsResumeResponses, GetJobsData, GetJobsResponses, GetApiV1ServerFollowersData, GetApiV1ServerFollowersResponses, DeleteApiV1ServerFollowersByHandleData, DeleteApiV1ServerFollowersByHandleResponses, DeleteApiV1ServerFollowersByHandleErrors, PostApiV1ServerFollowersByHandleRejectData, PostApiV1ServerFollowersByHandleRejectResponses, PostApiV1ServerFollowersByHandleRejectErrors, PostApiV1ServerFollowersByHandleAcceptData, PostApiV1ServerFollowersByHandleAcceptResponses, PostApiV1ServerFollowersByHandleAcceptErrors, GetApiV1ServerFollowingData, GetApiV1ServerFollowingResponses, PostApiV1ServerFollowingData, PostApiV1ServerFollowingResponses, PostApiV1ServerFollowingErrors, DeleteApiV1ServerFollowingByHostOrHandleData, DeleteApiV1ServerFollowingByHostOrHandleResponses, DeleteApiV1ServerFollowingByHostOrHandleErrors, GetUsersData, GetUsersResponses, AddUserData, AddUserResponses, AddUserErrors, DelUserData, DelUserResponses, GetUserData, GetUserResponses, PutUserData, PutUserResponses, GetOAuthClientData, GetOAuthClientResponses, GetOAuthTokenData, GetOAuthTokenResponses, GetOAuthTokenErrors, RevokeOAuthTokenData, RevokeOAuthTokenResponses, GetApiV1UsersByIdTokenSessionsData, GetApiV1UsersByIdTokenSessionsResponses, GetApiV1UsersByIdTokenSessionsByTokenSessionIdRevokeData, GetApiV1UsersByIdTokenSessionsByTokenSessionIdRevokeResponses, ResendEmailToVerifyUserData, ResendEmailToVerifyUserResponses, ResendEmailToVerifyRegistrationData, ResendEmailToVerifyRegistrationResponses, VerifyUserData, VerifyUserResponses, VerifyUserErrors, VerifyRegistrationEmailData, VerifyRegistrationEmailResponses, VerifyRegistrationEmailErrors, PostApiV1UsersAskResetPasswordData, PostApiV1UsersAskResetPasswordResponses, PostApiV1UsersByIdResetPasswordData, PostApiV1UsersByIdResetPasswordResponses, PostApiV1UsersByIdResetPasswordErrors, RequestTwoFactorData, RequestTwoFactorResponses, RequestTwoFactorErrors, ConfirmTwoFactorRequestData, ConfirmTwoFactorRequestResponses, ConfirmTwoFactorRequestErrors, DisableTwoFactorData, DisableTwoFactorResponses, DisableTwoFactorErrors, UserImportResumableCancelData, UserImportResumableCancelResponses, UserImportResumableInitData, UserImportResumableInitResponses, UserImportResumableData, UserImportResumableResponses, GetLatestUserImportData, GetLatestUserImportResponses, RequestUserExportData, RequestUserExportResponses, ListUserExportsData, ListUserExportsResponses, DeleteUserExportData, DeleteUserExportResponses, GetUserInfoData, GetUserInfoResponses, PutUserInfoData, PutUserInfoResponses, GetApiV1UsersMeVideosCommentsData, GetApiV1UsersMeVideosCommentsResponses, GetApiV1UsersMeVideosImportsData, GetApiV1UsersMeVideosImportsResponses, GetApiV1UsersMeVideoQuotaUsedData, GetApiV1UsersMeVideoQuotaUsedResponses, GetApiV1UsersMeVideosByVideoIdRatingData, GetApiV1UsersMeVideosByVideoIdRatingResponses, GetApiV1UsersMeVideosData, GetApiV1UsersMeVideosResponses, GetApiV1UsersMeSubscriptionsData, GetApiV1UsersMeSubscriptionsResponses, PostApiV1UsersMeSubscriptionsData, PostApiV1UsersMeSubscriptionsResponses, GetApiV1UsersMeSubscriptionsExistData, GetApiV1UsersMeSubscriptionsExistResponses, GetApiV1UsersMeSubscriptionsVideosData, GetApiV1UsersMeSubscriptionsVideosResponses, DeleteApiV1UsersMeSubscriptionsBySubscriptionHandleData, DeleteApiV1UsersMeSubscriptionsBySubscriptionHandleResponses, GetApiV1UsersMeSubscriptionsBySubscriptionHandleData, GetApiV1UsersMeSubscriptionsBySubscriptionHandleResponses, GetApiV1UsersMeNotificationsData, GetApiV1UsersMeNotificationsResponses, PostApiV1UsersMeNotificationsReadData, PostApiV1UsersMeNotificationsReadResponses, PostApiV1UsersMeNotificationsReadAllData, PostApiV1UsersMeNotificationsReadAllResponses, PutApiV1UsersMeNotificationSettingsData, PutApiV1UsersMeNotificationSettingsResponses, GetApiV1UsersMeHistoryVideosData, GetApiV1UsersMeHistoryVideosResponses, DeleteApiV1UsersMeHistoryVideosByVideoIdData, DeleteApiV1UsersMeHistoryVideosByVideoIdResponses, PostApiV1UsersMeHistoryVideosRemoveData, PostApiV1UsersMeHistoryVideosRemoveResponses, PostApiV1UsersMeAvatarPickData, PostApiV1UsersMeAvatarPickResponses, PostApiV1UsersMeAvatarPickErrors, DeleteApiV1UsersMeAvatarData, DeleteApiV1UsersMeAvatarResponses, RegisterUserData, RegisterUserResponses, RegisterUserErrors, RequestRegistrationData, RequestRegistrationResponses, RequestRegistrationErrors, AcceptRegistrationData, AcceptRegistrationResponses, RejectRegistrationData, RejectRegistrationResponses, DeleteRegistrationData, DeleteRegistrationResponses, ListRegistrationsData, ListRegistrationsResponses, GetApiV1VideosOwnershipData, GetApiV1VideosOwnershipResponses, PostApiV1VideosOwnershipByIdAcceptData, PostApiV1VideosOwnershipByIdAcceptResponses, PostApiV1VideosOwnershipByIdAcceptErrors, PostApiV1VideosOwnershipByIdRefuseData, PostApiV1VideosOwnershipByIdRefuseResponses, PostApiV1VideosOwnershipByIdRefuseErrors, PostApiV1VideosByIdGiveOwnershipData, PostApiV1VideosByIdGiveOwnershipResponses, PostApiV1VideosByIdGiveOwnershipErrors, RequestVideoTokenData, RequestVideoTokenResponses, RequestVideoTokenErrors, PostApiV1VideosByIdStudioEditData, PostApiV1VideosByIdStudioEditResponses, PostApiV1VideosByIdStudioEditErrors, GetVideosData, GetVideosResponses, GetCategoriesData, GetCategoriesResponses, GetLicencesData, GetLicencesResponses, GetLanguagesData, GetLanguagesResponses, GetVideoPrivacyPoliciesData, GetVideoPrivacyPoliciesResponses, DelVideoData, DelVideoResponses, GetVideoData, GetVideoResponses, GetVideoErrors, PutVideoData, PutVideoResponses, GetVideoDescData, GetVideoDescResponses, AddViewData, AddViewResponses, PutApiV1VideosByIdWatchingData, PutApiV1VideosByIdWatchingResponses, GetApiV1VideosByIdStatsOverallData, GetApiV1VideosByIdStatsOverallResponses, GetApiV1VideosByIdStatsUserAgentData, GetApiV1VideosByIdStatsUserAgentResponses, GetApiV1VideosByIdStatsRetentionData, GetApiV1VideosByIdStatsRetentionResponses, GetApiV1VideosByIdStatsTimeseriesByMetricData, GetApiV1VideosByIdStatsTimeseriesByMetricResponses, UploadLegacyData, UploadLegacyResponses, UploadLegacyErrors, UploadResumableCancelData, UploadResumableCancelResponses, UploadResumableCancelErrors, UploadResumableInitData, UploadResumableInitResponses, UploadResumableInitErrors, UploadResumableData, UploadResumableResponses, UploadResumableErrors, ImportVideoData, ImportVideoResponses, ImportVideoErrors, PostApiV1VideosImportsByIdCancelData, PostApiV1VideosImportsByIdCancelResponses, DeleteApiV1VideosImportsByIdData, DeleteApiV1VideosImportsByIdResponses, AddLiveData, AddLiveResponses, AddLiveErrors, GetLiveIdData, GetLiveIdResponses, UpdateLiveIdData, UpdateLiveIdResponses, UpdateLiveIdErrors, GetApiV1VideosLiveByIdSessionsData, GetApiV1VideosLiveByIdSessionsResponses, GetApiV1VideosByIdLiveSessionData, GetApiV1VideosByIdLiveSessionResponses, GetVideoSourceData, GetVideoSourceResponses, DeleteVideoSourceFileData, DeleteVideoSourceFileResponses, DeleteVideoSourceFileErrors, ReplaceVideoSourceResumableCancelData, ReplaceVideoSourceResumableCancelResponses, ReplaceVideoSourceResumableCancelErrors, ReplaceVideoSourceResumableInitData, ReplaceVideoSourceResumableInitResponses, ReplaceVideoSourceResumableInitErrors, ReplaceVideoSourceResumableData, ReplaceVideoSourceResumableResponses, ReplaceVideoSourceResumableErrors, GetMyAbusesData, GetMyAbusesResponses, GetAbusesData, GetAbusesResponses, PostApiV1AbusesData, PostApiV1AbusesResponses, PostApiV1AbusesErrors, DeleteApiV1AbusesByAbuseIdData, DeleteApiV1AbusesByAbuseIdResponses, DeleteApiV1AbusesByAbuseIdErrors, PutApiV1AbusesByAbuseIdData, PutApiV1AbusesByAbuseIdResponses, PutApiV1AbusesByAbuseIdErrors, GetApiV1AbusesByAbuseIdMessagesData, GetApiV1AbusesByAbuseIdMessagesResponses, PostApiV1AbusesByAbuseIdMessagesData, PostApiV1AbusesByAbuseIdMessagesResponses, PostApiV1AbusesByAbuseIdMessagesErrors, DeleteApiV1AbusesByAbuseIdMessagesByAbuseMessageIdData, DeleteApiV1AbusesByAbuseIdMessagesByAbuseMessageIdResponses, DelVideoBlockData, DelVideoBlockResponses, DelVideoBlockErrors, AddVideoBlockData, AddVideoBlockResponses, GetVideoBlocksData, GetVideoBlocksResponses, ListVideoStoryboardsData, ListVideoStoryboardsResponses, GetVideoCaptionsData, GetVideoCaptionsResponses, GenerateVideoCaptionData, GenerateVideoCaptionResponses, GenerateVideoCaptionErrors, DelVideoCaptionData, DelVideoCaptionResponses, DelVideoCaptionErrors, AddVideoCaptionData, AddVideoCaptionResponses, AddVideoCaptionErrors, GetVideoChaptersData, GetVideoChaptersResponses, ReplaceVideoChaptersData, ReplaceVideoChaptersResponses, ReplaceVideoChaptersErrors, GetApiV1VideosByIdPasswordsData, GetApiV1VideosByIdPasswordsResponses, GetApiV1VideosByIdPasswordsErrors, PutApiV1VideosByIdPasswordsData, PutApiV1VideosByIdPasswordsResponses, PutApiV1VideosByIdPasswordsErrors, DeleteApiV1VideosByIdPasswordsByVideoPasswordIdData, DeleteApiV1VideosByIdPasswordsByVideoPasswordIdResponses, DeleteApiV1VideosByIdPasswordsByVideoPasswordIdErrors, GetVideoChannelsData, GetVideoChannelsResponses, AddVideoChannelData, AddVideoChannelResponses, DelVideoChannelData, DelVideoChannelResponses, GetVideoChannelData, GetVideoChannelResponses, PutVideoChannelData, PutVideoChannelResponses, GetVideoChannelVideosData, GetVideoChannelVideosResponses, GetApiV1VideoChannelsByChannelHandleVideoPlaylistsData, GetApiV1VideoChannelsByChannelHandleVideoPlaylistsResponses, ReorderVideoPlaylistsOfChannelData, ReorderVideoPlaylistsOfChannelResponses, GetVideoChannelFollowersData, GetVideoChannelFollowersResponses, PostApiV1VideoChannelsByChannelHandleAvatarPickData, PostApiV1VideoChannelsByChannelHandleAvatarPickResponses, PostApiV1VideoChannelsByChannelHandleAvatarPickErrors, DeleteApiV1VideoChannelsByChannelHandleAvatarData, DeleteApiV1VideoChannelsByChannelHandleAvatarResponses, PostApiV1VideoChannelsByChannelHandleBannerPickData, PostApiV1VideoChannelsByChannelHandleBannerPickResponses, PostApiV1VideoChannelsByChannelHandleBannerPickErrors, DeleteApiV1VideoChannelsByChannelHandleBannerData, DeleteApiV1VideoChannelsByChannelHandleBannerResponses, PostApiV1VideoChannelsByChannelHandleImportVideosData, PostApiV1VideoChannelsByChannelHandleImportVideosResponses, AddVideoChannelSyncData, AddVideoChannelSyncResponses, DelVideoChannelSyncData, DelVideoChannelSyncResponses, TriggerVideoChannelSyncData, TriggerVideoChannelSyncResponses, GetVideoPlayerSettingsData, GetVideoPlayerSettingsResponses, GetVideoPlayerSettingsErrors, UpdateVideoPlayerSettingsData, UpdateVideoPlayerSettingsResponses, UpdateVideoPlayerSettingsErrors, GetChannelPlayerSettingsData, GetChannelPlayerSettingsResponses, GetChannelPlayerSettingsErrors, UpdateChannelPlayerSettingsData, UpdateChannelPlayerSettingsResponses, UpdateChannelPlayerSettingsErrors, GetPlaylistPrivacyPoliciesData, GetPlaylistPrivacyPoliciesResponses, GetPlaylistsData, GetPlaylistsResponses, AddPlaylistData, AddPlaylistResponses, DeleteApiV1VideoPlaylistsByPlaylistIdData, DeleteApiV1VideoPlaylistsByPlaylistIdResponses, GetApiV1VideoPlaylistsByPlaylistIdData, GetApiV1VideoPlaylistsByPlaylistIdResponses, PutApiV1VideoPlaylistsByPlaylistIdData, PutApiV1VideoPlaylistsByPlaylistIdResponses, GetVideoPlaylistVideosData, GetVideoPlaylistVideosResponses, AddVideoPlaylistVideoData, AddVideoPlaylistVideoResponses, ReorderVideoPlaylistData, ReorderVideoPlaylistResponses, DelVideoPlaylistVideoData, DelVideoPlaylistVideoResponses, PutVideoPlaylistVideoData, PutVideoPlaylistVideoResponses, GetApiV1UsersMeVideoPlaylistsVideosExistData, GetApiV1UsersMeVideoPlaylistsVideosExistResponses, GetApiV1AccountsByNameVideoPlaylistsData, GetApiV1AccountsByNameVideoPlaylistsResponses, GetApiV1AccountsByNameVideoChannelsData, GetApiV1AccountsByNameVideoChannelsResponses, GetApiV1AccountsByNameVideoChannelSyncsData, GetApiV1AccountsByNameVideoChannelSyncsResponses, GetApiV1AccountsByNameRatingsData, GetApiV1AccountsByNameRatingsResponses, GetApiV1VideosByIdCommentThreadsData, GetApiV1VideosByIdCommentThreadsResponses, PostApiV1VideosByIdCommentThreadsData, PostApiV1VideosByIdCommentThreadsResponses, PostApiV1VideosByIdCommentThreadsErrors, GetApiV1VideosByIdCommentThreadsByThreadIdData, GetApiV1VideosByIdCommentThreadsByThreadIdResponses, GetApiV1VideosCommentsData, GetApiV1VideosCommentsResponses, DeleteApiV1VideosByIdCommentsByCommentIdData, DeleteApiV1VideosByIdCommentsByCommentIdResponses, DeleteApiV1VideosByIdCommentsByCommentIdErrors, PostApiV1VideosByIdCommentsByCommentIdData, PostApiV1VideosByIdCommentsByCommentIdResponses, PostApiV1VideosByIdCommentsByCommentIdErrors, PostApiV1VideosByIdCommentsByCommentIdApproveData, PostApiV1VideosByIdCommentsByCommentIdApproveResponses, PutApiV1VideosByIdRateData, PutApiV1VideosByIdRateResponses, PutApiV1VideosByIdRateErrors, DelVideoHlsData, DelVideoHlsResponses, DelVideoHlsErrors, DelVideoWebVideosData, DelVideoWebVideosResponses, DelVideoWebVideosErrors, CreateVideoTranscodingData, CreateVideoTranscodingResponses, CreateVideoTranscodingErrors, SearchVideosData, SearchVideosResponses, SearchVideosErrors, SearchChannelsData, SearchChannelsResponses, SearchChannelsErrors, SearchPlaylistsData, SearchPlaylistsResponses, SearchPlaylistsErrors, GetApiV1BlocklistStatusData, GetApiV1BlocklistStatusResponses, GetApiV1ServerBlocklistAccountsData, GetApiV1ServerBlocklistAccountsResponses, PostApiV1ServerBlocklistAccountsData, PostApiV1ServerBlocklistAccountsResponses, PostApiV1ServerBlocklistAccountsErrors, DeleteApiV1ServerBlocklistAccountsByAccountNameData, DeleteApiV1ServerBlocklistAccountsByAccountNameResponses, DeleteApiV1ServerBlocklistAccountsByAccountNameErrors, GetApiV1ServerBlocklistServersData, GetApiV1ServerBlocklistServersResponses, PostApiV1ServerBlocklistServersData, PostApiV1ServerBlocklistServersResponses, PostApiV1ServerBlocklistServersErrors, DeleteApiV1ServerBlocklistServersByHostData, DeleteApiV1ServerBlocklistServersByHostResponses, DeleteApiV1ServerBlocklistServersByHostErrors, PutApiV1ServerRedundancyByHostData, PutApiV1ServerRedundancyByHostResponses, PutApiV1ServerRedundancyByHostErrors, GetMirroredVideosData, GetMirroredVideosResponses, PutMirroredVideoData, PutMirroredVideoResponses, PutMirroredVideoErrors, DelMirroredVideoData, DelMirroredVideoResponses, DelMirroredVideoErrors, GetInstanceStatsData, GetInstanceStatsResponses, SendClientLogData, SendClientLogResponses, GetInstanceLogsData, GetInstanceLogsResponses, GetInstanceAuditLogsData, GetInstanceAuditLogsResponses, GetPluginsData, GetPluginsResponses, GetAvailablePluginsData, GetAvailablePluginsResponses, GetAvailablePluginsErrors, AddPluginData, AddPluginResponses, AddPluginErrors, UpdatePluginData, UpdatePluginResponses, UpdatePluginErrors, UninstallPluginData, UninstallPluginResponses, UninstallPluginErrors, GetPluginData, GetPluginResponses, GetPluginErrors, PutApiV1PluginsByNpmNameSettingsData, PutApiV1PluginsByNpmNameSettingsResponses, PutApiV1PluginsByNpmNameSettingsErrors, GetApiV1PluginsByNpmNamePublicSettingsData, GetApiV1PluginsByNpmNamePublicSettingsResponses, GetApiV1PluginsByNpmNamePublicSettingsErrors, GetApiV1PluginsByNpmNameRegisteredSettingsData, GetApiV1PluginsByNpmNameRegisteredSettingsResponses, GetApiV1PluginsByNpmNameRegisteredSettingsErrors, PostApiV1MetricsPlaybackData, PostApiV1MetricsPlaybackResponses, PostApiV1RunnersRegistrationTokensGenerateData, PostApiV1RunnersRegistrationTokensGenerateResponses, DeleteApiV1RunnersRegistrationTokensByRegistrationTokenIdData, DeleteApiV1RunnersRegistrationTokensByRegistrationTokenIdResponses, GetApiV1RunnersRegistrationTokensData, GetApiV1RunnersRegistrationTokensResponses, PostApiV1RunnersRegisterData, PostApiV1RunnersRegisterResponses, PostApiV1RunnersUnregisterData, PostApiV1RunnersUnregisterResponses, DeleteApiV1RunnersByRunnerIdData, DeleteApiV1RunnersByRunnerIdResponses, GetApiV1RunnersData, GetApiV1RunnersResponses, PostApiV1RunnersJobsRequestData, PostApiV1RunnersJobsRequestResponses, PostApiV1RunnersJobsByJobUuidAcceptData, PostApiV1RunnersJobsByJobUuidAcceptResponses, PostApiV1RunnersJobsByJobUuidAbortData, PostApiV1RunnersJobsByJobUuidAbortResponses, PostApiV1RunnersJobsByJobUuidUpdateData, PostApiV1RunnersJobsByJobUuidUpdateResponses, PostApiV1RunnersJobsByJobUuidErrorData, PostApiV1RunnersJobsByJobUuidErrorResponses, PostApiV1RunnersJobsByJobUuidSuccessData, PostApiV1RunnersJobsByJobUuidSuccessResponses, GetApiV1RunnersJobsByJobUuidCancelData, GetApiV1RunnersJobsByJobUuidCancelResponses, DeleteApiV1RunnersJobsByJobUuidData, DeleteApiV1RunnersJobsByJobUuidResponses, GetApiV1RunnersJobsData, GetApiV1RunnersJobsResponses, GetApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsData, GetApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsResponses, PutApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsData, PutApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsResponses, GetApiV1AutomaticTagsAccountsByAccountNameAvailableData, GetApiV1AutomaticTagsAccountsByAccountNameAvailableResponses, GetApiV1AutomaticTagsServerAvailableData, GetApiV1AutomaticTagsServerAvailableResponses, GetApiV1WatchedWordsAccountsByAccountNameListsData, GetApiV1WatchedWordsAccountsByAccountNameListsResponses, PostApiV1WatchedWordsAccountsByAccountNameListsData, PostApiV1WatchedWordsAccountsByAccountNameListsResponses, DeleteApiV1WatchedWordsAccountsByAccountNameListsByListIdData, DeleteApiV1WatchedWordsAccountsByAccountNameListsByListIdResponses, PutApiV1WatchedWordsAccountsByAccountNameListsByListIdData, PutApiV1WatchedWordsAccountsByAccountNameListsByListIdResponses, GetApiV1WatchedWordsServerListsData, GetApiV1WatchedWordsServerListsResponses, PostApiV1WatchedWordsServerListsData, PostApiV1WatchedWordsServerListsResponses, DeleteApiV1WatchedWordsServerListsByListIdData, DeleteApiV1WatchedWordsServerListsByListIdResponses, PutApiV1WatchedWordsServerListsByListIdData, PutApiV1WatchedWordsServerListsByListIdResponses, UpdateClientLanguageData, UpdateClientLanguageResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get public Web Video file
 * **PeerTube >= 6.0**
 */
export const getStaticWebVideosByFilename = <ThrowOnError extends boolean = false>(options: Options<GetStaticWebVideosByFilenameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStaticWebVideosByFilenameResponses, GetStaticWebVideosByFilenameErrors, ThrowOnError>({
        url: '/static/web-videos/{filename}',
        ...options
    });
};

/**
 * Get private Web Video file
 * **PeerTube >= 6.0**
 */
export const getStaticWebVideosPrivateByFilename = <ThrowOnError extends boolean = false>(options: Options<GetStaticWebVideosPrivateByFilenameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStaticWebVideosPrivateByFilenameResponses, GetStaticWebVideosPrivateByFilenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static/web-videos/private/{filename}',
        ...options
    });
};

/**
 * Get public HLS video file
 */
export const getStaticStreamingPlaylistsHlsByFilename = <ThrowOnError extends boolean = false>(options: Options<GetStaticStreamingPlaylistsHlsByFilenameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStaticStreamingPlaylistsHlsByFilenameResponses, GetStaticStreamingPlaylistsHlsByFilenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static/streaming-playlists/hls/{filename}',
        ...options
    });
};

/**
 * Get private HLS video file
 */
export const getStaticStreamingPlaylistsHlsPrivateByFilename = <ThrowOnError extends boolean = false>(options: Options<GetStaticStreamingPlaylistsHlsPrivateByFilenameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStaticStreamingPlaylistsHlsPrivateByFilenameResponses, GetStaticStreamingPlaylistsHlsPrivateByFilenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static/streaming-playlists/hls/private/{filename}',
        ...options
    });
};

/**
 * Download video file
 * Generate a mp4 container that contains at most 1 video stream and at most 1 audio stream. Mainly used to merge the HLS audio only video file and the HLS video only resolution file.
 */
export const getDownloadVideosGenerateByVideoId = <ThrowOnError extends boolean = false>(options: Options<GetDownloadVideosGenerateByVideoIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDownloadVideosGenerateByVideoIdResponses, unknown, ThrowOnError>({
        url: '/download/videos/generate/{videoId}',
        ...options
    });
};

/**
 * Comments on videos feeds
 */
export const getSyndicatedComments = <ThrowOnError extends boolean = false>(options: Options<GetSyndicatedCommentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSyndicatedCommentsResponses, GetSyndicatedCommentsErrors, ThrowOnError>({
        url: '/feeds/video-comments.{format}',
        ...options
    });
};

/**
 * Common videos feeds
 */
export const getSyndicatedVideos = <ThrowOnError extends boolean = false>(options: Options<GetSyndicatedVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSyndicatedVideosResponses, GetSyndicatedVideosErrors, ThrowOnError>({
        url: '/feeds/videos.{format}',
        ...options
    });
};

/**
 * Videos of subscriptions feeds
 */
export const getSyndicatedSubscriptionVideos = <ThrowOnError extends boolean = false>(options: Options<GetSyndicatedSubscriptionVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSyndicatedSubscriptionVideosResponses, GetSyndicatedSubscriptionVideosErrors, ThrowOnError>({
        url: '/feeds/subscriptions.{format}',
        ...options
    });
};

/**
 * Videos podcast feed
 */
export const getVideosPodcastFeed = <ThrowOnError extends boolean = false>(options: Options<GetVideosPodcastFeedData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideosPodcastFeedResponses, GetVideosPodcastFeedErrors, ThrowOnError>({
        url: '/feeds/podcast/videos.xml',
        ...options
    });
};

/**
 * Get an account
 */
export const getAccount = <ThrowOnError extends boolean = false>(options: Options<GetAccountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountResponses, GetAccountErrors, ThrowOnError>({
        url: '/api/v1/accounts/{name}',
        ...options
    });
};

/**
 * List videos of an account
 */
export const getAccountVideos = <ThrowOnError extends boolean = false>(options: Options<GetAccountVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountVideosResponses, unknown, ThrowOnError>({
        url: '/api/v1/accounts/{name}/videos',
        ...options
    });
};

/**
 * List followers of an account
 */
export const getAccountFollowers = <ThrowOnError extends boolean = false>(options: Options<GetAccountFollowersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountFollowersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/{name}/followers',
        ...options
    });
};

/**
 * List accounts
 */
export const getAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsResponses, unknown, ThrowOnError>({
        url: '/api/v1/accounts',
        ...options
    });
};

/**
 * Get instance public configuration
 */
export const getConfig = <ThrowOnError extends boolean = false>(options?: Options<GetConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetConfigResponses, unknown, ThrowOnError>({
        url: '/api/v1/config',
        ...options
    });
};

/**
 * Get instance "About" information
 */
export const getAbout = <ThrowOnError extends boolean = false>(options?: Options<GetAboutData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAboutResponses, unknown, ThrowOnError>({
        url: '/api/v1/config/about',
        ...options
    });
};

/**
 * Delete instance runtime configuration
 */
export const delCustomConfig = <ThrowOnError extends boolean = false>(options?: Options<DelCustomConfigData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DelCustomConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/custom',
        ...options
    });
};

/**
 * Get instance runtime configuration
 */
export const getCustomConfig = <ThrowOnError extends boolean = false>(options?: Options<GetCustomConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/custom',
        ...options
    });
};

/**
 * Set instance runtime configuration
 */
export const putCustomConfig = <ThrowOnError extends boolean = false>(options?: Options<PutCustomConfigData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutCustomConfigResponses, PutCustomConfigErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/custom',
        ...options
    });
};

/**
 * Update instance banner
 */
export const postApiV1ConfigInstanceBannerPick = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ConfigInstanceBannerPickData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1ConfigInstanceBannerPickResponses, PostApiV1ConfigInstanceBannerPickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-banner/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete instance banner
 */
export const deleteApiV1ConfigInstanceBanner = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiV1ConfigInstanceBannerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiV1ConfigInstanceBannerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-banner',
        ...options
    });
};

/**
 * Update instance avatar
 */
export const postApiV1ConfigInstanceAvatarPick = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ConfigInstanceAvatarPickData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1ConfigInstanceAvatarPickResponses, PostApiV1ConfigInstanceAvatarPickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-avatar/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete instance avatar
 */
export const deleteApiV1ConfigInstanceAvatar = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiV1ConfigInstanceAvatarData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiV1ConfigInstanceAvatarResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-avatar',
        ...options
    });
};

/**
 * Update instance logo
 */
export const postApiV1ConfigInstanceLogoLogoTypePick = <ThrowOnError extends boolean = false>(options: Options<PostApiV1ConfigInstanceLogoLogoTypePickData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1ConfigInstanceLogoLogoTypePickResponses, PostApiV1ConfigInstanceLogoLogoTypePickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-logo/:logoType/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete instance logo
 */
export const deleteApiV1ConfigInstanceLogoLogoType = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ConfigInstanceLogoLogoTypeData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1ConfigInstanceLogoLogoTypeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/config/instance-logo/:logoType',
        ...options
    });
};

/**
 * Get instance custom homepage
 */
export const getApiV1CustomPagesHomepageInstance = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1CustomPagesHomepageInstanceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1CustomPagesHomepageInstanceResponses, GetApiV1CustomPagesHomepageInstanceErrors, ThrowOnError>({
        url: '/api/v1/custom-pages/homepage/instance',
        ...options
    });
};

/**
 * Set instance custom homepage
 */
export const putApiV1CustomPagesHomepageInstance = <ThrowOnError extends boolean = false>(options?: Options<PutApiV1CustomPagesHomepageInstanceData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiV1CustomPagesHomepageInstanceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/custom-pages/homepage/instance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pause job queue
 */
export const postApiV1JobsPause = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1JobsPauseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1JobsPauseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/pause',
        ...options
    });
};

/**
 * Resume job queue
 */
export const postApiV1JobsResume = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1JobsResumeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1JobsResumeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/resume',
        ...options
    });
};

/**
 * List instance jobs
 */
export const getJobs = <ThrowOnError extends boolean = false>(options: Options<GetJobsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetJobsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{state}',
        ...options
    });
};

/**
 * List instances following the server
 */
export const getApiV1ServerFollowers = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ServerFollowersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1ServerFollowersResponses, unknown, ThrowOnError>({
        url: '/api/v1/server/followers',
        ...options
    });
};

/**
 * Remove or reject a follower to your server
 */
export const deleteApiV1ServerFollowersByHandle = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ServerFollowersByHandleData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1ServerFollowersByHandleResponses, DeleteApiV1ServerFollowersByHandleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/followers/{handle}',
        ...options
    });
};

/**
 * Reject a pending follower to your server
 */
export const postApiV1ServerFollowersByHandleReject = <ThrowOnError extends boolean = false>(options: Options<PostApiV1ServerFollowersByHandleRejectData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1ServerFollowersByHandleRejectResponses, PostApiV1ServerFollowersByHandleRejectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/followers/{handle}/reject',
        ...options
    });
};

/**
 * Accept a pending follower to your server
 */
export const postApiV1ServerFollowersByHandleAccept = <ThrowOnError extends boolean = false>(options: Options<PostApiV1ServerFollowersByHandleAcceptData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1ServerFollowersByHandleAcceptResponses, PostApiV1ServerFollowersByHandleAcceptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/followers/{handle}/accept',
        ...options
    });
};

/**
 * List instances followed by the server
 */
export const getApiV1ServerFollowing = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ServerFollowingData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1ServerFollowingResponses, unknown, ThrowOnError>({
        url: '/api/v1/server/following',
        ...options
    });
};

/**
 * Follow a list of actors (PeerTube instance, channel or account)
 */
export const postApiV1ServerFollowing = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ServerFollowingData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1ServerFollowingResponses, PostApiV1ServerFollowingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/following',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unfollow an actor (PeerTube instance, channel or account)
 */
export const deleteApiV1ServerFollowingByHostOrHandle = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ServerFollowingByHostOrHandleData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1ServerFollowingByHostOrHandleResponses, DeleteApiV1ServerFollowingByHostOrHandleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/following/{hostOrHandle}',
        ...options
    });
};

/**
 * List users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users',
        ...options
    });
};

/**
 * Create a user
 */
export const addUser = <ThrowOnError extends boolean = false>(options: Options<AddUserData, ThrowOnError>) => {
    return (options.client ?? client).post<AddUserResponses, AddUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user
 */
export const delUser = <ThrowOnError extends boolean = false>(options: Options<DelUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Get a user
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Update a user
 */
export const putUser = <ThrowOnError extends boolean = false>(options: Options<PutUserData, ThrowOnError>) => {
    return (options.client ?? client).put<PutUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login prerequisite
 * You need to retrieve a client id and secret before [logging in](#operation/getOAuthToken).
 */
export const getOAuthClient = <ThrowOnError extends boolean = false>(options?: Options<GetOAuthClientData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOAuthClientResponses, unknown, ThrowOnError>({
        url: '/api/v1/oauth-clients/local',
        ...options
    });
};

/**
 * Login
 * With your [client id and secret](#operation/getOAuthClient), you can retrieve an access and refresh tokens.
 */
export const getOAuthToken = <ThrowOnError extends boolean = false>(options?: Options<GetOAuthTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetOAuthTokenResponses, GetOAuthTokenErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/users/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Logout
 * Revokes your access token and its associated refresh token, destroying your current session.
 */
export const revokeOAuthToken = <ThrowOnError extends boolean = false>(options?: Options<RevokeOAuthTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<RevokeOAuthTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/revoke-token',
        ...options
    });
};

/**
 * List token sessions
 */
export const getApiV1UsersByIdTokenSessions = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersByIdTokenSessionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersByIdTokenSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}/token-sessions',
        ...options
    });
};

/**
 * List token sessions
 */
export const getApiV1UsersByIdTokenSessionsByTokenSessionIdRevoke = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersByIdTokenSessionsByTokenSessionIdRevokeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersByIdTokenSessionsByTokenSessionIdRevokeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}/token-sessions/{tokenSessionId}/revoke',
        ...options
    });
};

/**
 * Resend user verification link
 */
export const resendEmailToVerifyUser = <ThrowOnError extends boolean = false>(options?: Options<ResendEmailToVerifyUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResendEmailToVerifyUserResponses, unknown, ThrowOnError>({
        url: '/api/v1/users/ask-send-verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Resend verification link to registration request email
 */
export const resendEmailToVerifyRegistration = <ThrowOnError extends boolean = false>(options?: Options<ResendEmailToVerifyRegistrationData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResendEmailToVerifyRegistrationResponses, unknown, ThrowOnError>({
        url: '/api/v1/users/registrations/ask-send-verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify a user
 * Following a user registration, the new user will receive an email asking to click a link
 * containing a secret.
 * This endpoint can also be used to verify a new email set in the user account.
 *
 */
export const verifyUser = <ThrowOnError extends boolean = false>(options: Options<VerifyUserData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyUserResponses, VerifyUserErrors, ThrowOnError>({
        url: '/api/v1/users/{id}/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify a registration email
 * Following a user registration request, the user will receive an email asking to click a link
 * containing a secret.
 *
 */
export const verifyRegistrationEmail = <ThrowOnError extends boolean = false>(options: Options<VerifyRegistrationEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyRegistrationEmailResponses, VerifyRegistrationEmailErrors, ThrowOnError>({
        url: '/api/v1/users/registrations/{registrationId}/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Ask to reset password
 * An email containing a reset password link
 */
export const postApiV1UsersAskResetPassword = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersAskResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersAskResetPasswordResponses, unknown, ThrowOnError>({
        url: '/api/v1/users/ask-reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset password
 */
export const postApiV1UsersByIdResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiV1UsersByIdResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1UsersByIdResetPasswordResponses, PostApiV1UsersByIdResetPasswordErrors, ThrowOnError>({
        url: '/api/v1/users/{id}/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request two factor auth
 * Request two factor authentication for a user
 */
export const requestTwoFactor = <ThrowOnError extends boolean = false>(options: Options<RequestTwoFactorData, ThrowOnError>) => {
    return (options.client ?? client).post<RequestTwoFactorResponses, RequestTwoFactorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}/two-factor/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Confirm two factor auth
 * Confirm a two factor authentication request
 */
export const confirmTwoFactorRequest = <ThrowOnError extends boolean = false>(options: Options<ConfirmTwoFactorRequestData, ThrowOnError>) => {
    return (options.client ?? client).post<ConfirmTwoFactorRequestResponses, ConfirmTwoFactorRequestErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}/two-factor/confirm-request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable two factor auth
 * Disable two factor authentication of a user
 */
export const disableTwoFactor = <ThrowOnError extends boolean = false>(options: Options<DisableTwoFactorData, ThrowOnError>) => {
    return (options.client ?? client).post<DisableTwoFactorResponses, DisableTwoFactorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{id}/two-factor/disable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel the resumable user import
 * **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the resumable user import
 */
export const userImportResumableCancel = <ThrowOnError extends boolean = false>(options: Options<UserImportResumableCancelData, ThrowOnError>) => {
    return (options.client ?? client).delete<UserImportResumableCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/imports/import-resumable',
        ...options
    });
};

/**
 * Initialize the resumable user import
 * **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the import of the archive
 */
export const userImportResumableInit = <ThrowOnError extends boolean = false>(options: Options<UserImportResumableInitData, ThrowOnError>) => {
    return (options.client ?? client).post<UserImportResumableInitResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/imports/import-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send chunk for the resumable user import
 * **PeerTube >= 6.1** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the import of the archive
 */
export const userImportResumable = <ThrowOnError extends boolean = false>(options: Options<UserImportResumableData, ThrowOnError>) => {
    return (options.client ?? client).put<UserImportResumableResponses, unknown, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/imports/import-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options.headers
        }
    });
};

/**
 * Get latest user import
 * **PeerTube >= 6.1**
 */
export const getLatestUserImport = <ThrowOnError extends boolean = false>(options: Options<GetLatestUserImportData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLatestUserImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/imports/latest',
        ...options
    });
};

/**
 * Request user export
 * Request an archive of user data. An email is sent when the archive is ready.
 */
export const requestUserExport = <ThrowOnError extends boolean = false>(options: Options<RequestUserExportData, ThrowOnError>) => {
    return (options.client ?? client).post<RequestUserExportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/exports/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List user exports
 * **PeerTube >= 6.1**
 */
export const listUserExports = <ThrowOnError extends boolean = false>(options: Options<ListUserExportsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListUserExportsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/exports',
        ...options
    });
};

/**
 * Delete a user export
 * **PeerTube >= 6.1**
 */
export const deleteUserExport = <ThrowOnError extends boolean = false>(options: Options<DeleteUserExportData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserExportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{userId}/exports/{id}',
        ...options
    });
};

/**
 * Get my user information
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Update my user information
 */
export const putUserInfo = <ThrowOnError extends boolean = false>(options: Options<PutUserInfoData, ThrowOnError>) => {
    return (options.client ?? client).put<PutUserInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List comments on user's videos
 * **PeerTube >= 6.2**
 */
export const getApiV1UsersMeVideosComments = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeVideosCommentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeVideosCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/videos/comments',
        ...options
    });
};

/**
 * Get video imports of my user
 */
export const getApiV1UsersMeVideosImports = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeVideosImportsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeVideosImportsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/videos/imports',
        ...options
    });
};

/**
 * Get my user used quota
 */
export const getApiV1UsersMeVideoQuotaUsed = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeVideoQuotaUsedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeVideoQuotaUsedResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/video-quota-used',
        ...options
    });
};

/**
 * Get rate of my user for a video
 */
export const getApiV1UsersMeVideosByVideoIdRating = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersMeVideosByVideoIdRatingData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersMeVideosByVideoIdRatingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/videos/{videoId}/rating',
        ...options
    });
};

/**
 * List videos of my user
 */
export const getApiV1UsersMeVideos = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeVideosData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeVideosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/videos',
        ...options
    });
};

/**
 * List my user subscriptions
 */
export const getApiV1UsersMeSubscriptions = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeSubscriptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions',
        ...options
    });
};

/**
 * Add subscription to my user
 */
export const postApiV1UsersMeSubscriptions = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersMeSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersMeSubscriptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get if subscriptions exist for my user
 */
export const getApiV1UsersMeSubscriptionsExist = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersMeSubscriptionsExistData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersMeSubscriptionsExistResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions/exist',
        ...options
    });
};

/**
 * List videos of subscriptions of my user
 */
export const getApiV1UsersMeSubscriptionsVideos = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeSubscriptionsVideosData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeSubscriptionsVideosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions/videos',
        ...options
    });
};

/**
 * Delete subscription of my user
 */
export const deleteApiV1UsersMeSubscriptionsBySubscriptionHandle = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1UsersMeSubscriptionsBySubscriptionHandleData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1UsersMeSubscriptionsBySubscriptionHandleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions/{subscriptionHandle}',
        ...options
    });
};

/**
 * Get subscription of my user
 */
export const getApiV1UsersMeSubscriptionsBySubscriptionHandle = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersMeSubscriptionsBySubscriptionHandleData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersMeSubscriptionsBySubscriptionHandleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/subscriptions/{subscriptionHandle}',
        ...options
    });
};

/**
 * List my notifications
 */
export const getApiV1UsersMeNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeNotificationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeNotificationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/notifications',
        ...options
    });
};

/**
 * Mark notifications as read by their id
 */
export const postApiV1UsersMeNotificationsRead = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersMeNotificationsReadData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersMeNotificationsReadResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/notifications/read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mark all my notification as read
 */
export const postApiV1UsersMeNotificationsReadAll = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersMeNotificationsReadAllData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersMeNotificationsReadAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/notifications/read-all',
        ...options
    });
};

/**
 * Update my notification settings
 */
export const putApiV1UsersMeNotificationSettings = <ThrowOnError extends boolean = false>(options?: Options<PutApiV1UsersMeNotificationSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiV1UsersMeNotificationSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/notification-settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List watched videos history
 */
export const getApiV1UsersMeHistoryVideos = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UsersMeHistoryVideosData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1UsersMeHistoryVideosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/history/videos',
        ...options
    });
};

/**
 * Delete history element
 */
export const deleteApiV1UsersMeHistoryVideosByVideoId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1UsersMeHistoryVideosByVideoIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1UsersMeHistoryVideosByVideoIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/history/videos/{videoId}',
        ...options
    });
};

/**
 * Clear video history
 */
export const postApiV1UsersMeHistoryVideosRemove = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersMeHistoryVideosRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersMeHistoryVideosRemoveResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/history/videos/remove',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Update my user avatar
 */
export const postApiV1UsersMeAvatarPick = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UsersMeAvatarPickData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1UsersMeAvatarPickResponses, PostApiV1UsersMeAvatarPickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/avatar/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete my avatar
 */
export const deleteApiV1UsersMeAvatar = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiV1UsersMeAvatarData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiV1UsersMeAvatarResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/avatar',
        ...options
    });
};

/**
 * Register a user
 * Signup has to be enabled and signup approval is not required
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserResponses, RegisterUserErrors, ThrowOnError>({
        url: '/api/v1/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request registration
 * Signup has to be enabled and require approval on the instance
 */
export const requestRegistration = <ThrowOnError extends boolean = false>(options?: Options<RequestRegistrationData, ThrowOnError>) => {
    return (options?.client ?? client).post<RequestRegistrationResponses, RequestRegistrationErrors, ThrowOnError>({
        url: '/api/v1/users/registrations/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept registration
 */
export const acceptRegistration = <ThrowOnError extends boolean = false>(options: Options<AcceptRegistrationData, ThrowOnError>) => {
    return (options.client ?? client).post<AcceptRegistrationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/registrations/{registrationId}/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reject registration
 */
export const rejectRegistration = <ThrowOnError extends boolean = false>(options: Options<RejectRegistrationData, ThrowOnError>) => {
    return (options.client ?? client).post<RejectRegistrationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/registrations/{registrationId}/reject',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete registration
 * Delete the registration entry. It will not remove the user associated with this registration (if any)
 */
export const deleteRegistration = <ThrowOnError extends boolean = false>(options: Options<DeleteRegistrationData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteRegistrationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/registrations/{registrationId}',
        ...options
    });
};

/**
 * List registrations
 */
export const listRegistrations = <ThrowOnError extends boolean = false>(options?: Options<ListRegistrationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRegistrationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/registrations',
        ...options
    });
};

/**
 * List video ownership changes
 */
export const getApiV1VideosOwnership = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1VideosOwnershipData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1VideosOwnershipResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/ownership',
        ...options
    });
};

/**
 * Accept ownership change request
 */
export const postApiV1VideosOwnershipByIdAccept = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosOwnershipByIdAcceptData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosOwnershipByIdAcceptResponses, PostApiV1VideosOwnershipByIdAcceptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/ownership/{id}/accept',
        ...options
    });
};

/**
 * Refuse ownership change request
 */
export const postApiV1VideosOwnershipByIdRefuse = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosOwnershipByIdRefuseData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosOwnershipByIdRefuseResponses, PostApiV1VideosOwnershipByIdRefuseErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/ownership/{id}/refuse',
        ...options
    });
};

/**
 * Request ownership change
 */
export const postApiV1VideosByIdGiveOwnership = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosByIdGiveOwnershipData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosByIdGiveOwnershipResponses, PostApiV1VideosByIdGiveOwnershipErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/give-ownership',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request video token
 * Request special tokens that expire quickly to use them in some context (like accessing private static files)
 */
export const requestVideoToken = <ThrowOnError extends boolean = false>(options: Options<RequestVideoTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<RequestVideoTokenResponses, RequestVideoTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/token',
        ...options
    });
};

/**
 * Create a studio task
 * Create a task to edit a video  (cut, add intro/outro etc)
 */
export const postApiV1VideosByIdStudioEdit = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosByIdStudioEditData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosByIdStudioEditResponses, PostApiV1VideosByIdStudioEditErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/studio/edit',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List videos
 */
export const getVideos = <ThrowOnError extends boolean = false>(options?: Options<GetVideosData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVideosResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos',
        ...options
    });
};

/**
 * List available video categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoriesResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/categories',
        ...options
    });
};

/**
 * List available video licences
 */
export const getLicences = <ThrowOnError extends boolean = false>(options?: Options<GetLicencesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLicencesResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/licences',
        ...options
    });
};

/**
 * List available video languages
 */
export const getLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetLanguagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLanguagesResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/languages',
        ...options
    });
};

/**
 * List available video privacy policies
 */
export const getVideoPrivacyPolicies = <ThrowOnError extends boolean = false>(options?: Options<GetVideoPrivacyPoliciesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVideoPrivacyPoliciesResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/privacies',
        ...options
    });
};

/**
 * Delete a video
 */
export const delVideo = <ThrowOnError extends boolean = false>(options: Options<DelVideoData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}',
        ...options
    });
};

/**
 * Get a video
 */
export const getVideo = <ThrowOnError extends boolean = false>(options: Options<GetVideoData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoResponses, GetVideoErrors, ThrowOnError>({
        url: '/api/v1/videos/{id}',
        ...options
    });
};

/**
 * Update a video
 */
export const putVideo = <ThrowOnError extends boolean = false>(options: Options<PutVideoData, ThrowOnError>) => {
    return (options.client ?? client).put<PutVideoResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get complete video description
 */
export const getVideoDesc = <ThrowOnError extends boolean = false>(options: Options<GetVideoDescData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoDescResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/description',
        ...options
    });
};

/**
 * Notify user is watching a video
 * Call this endpoint regularly (every 5-10 seconds for example) to notify the server the user is watching the video. After a while, PeerTube will increase video's viewers counter. If the user is authenticated, PeerTube will also store the current player time.
 */
export const addView = <ThrowOnError extends boolean = false>(options: Options<AddViewData, ThrowOnError>) => {
    return (options.client ?? client).post<AddViewResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/views',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set watching progress of a video
 * This endpoint has been deprecated. Use `/videos/{id}/views` instead
 * @deprecated
 */
export const putApiV1VideosByIdWatching = <ThrowOnError extends boolean = false>(options: Options<PutApiV1VideosByIdWatchingData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1VideosByIdWatchingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/watching',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get overall stats of a video
 */
export const getApiV1VideosByIdStatsOverall = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdStatsOverallData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdStatsOverallResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/stats/overall',
        ...options
    });
};

/**
 * Get user agent stats of a video
 */
export const getApiV1VideosByIdStatsUserAgent = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdStatsUserAgentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdStatsUserAgentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/stats/user-agent',
        ...options
    });
};

/**
 * Get retention stats of a video
 */
export const getApiV1VideosByIdStatsRetention = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdStatsRetentionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdStatsRetentionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/stats/retention',
        ...options
    });
};

/**
 * Get timeserie stats of a video
 */
export const getApiV1VideosByIdStatsTimeseriesByMetric = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdStatsTimeseriesByMetricData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdStatsTimeseriesByMetricResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/stats/timeseries/{metric}',
        ...options
    });
};

/**
 * Upload a video
 * Uses a single request to upload a video.
 */
export const uploadLegacy = <ThrowOnError extends boolean = false>(options?: Options<UploadLegacyData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadLegacyResponses, UploadLegacyErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Cancel the resumable upload of a video, deleting any data uploaded so far
 * Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video
 */
export const uploadResumableCancel = <ThrowOnError extends boolean = false>(options: Options<UploadResumableCancelData, ThrowOnError>) => {
    return (options.client ?? client).delete<UploadResumableCancelResponses, UploadResumableCancelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/upload-resumable',
        ...options
    });
};

/**
 * Initialize the resumable upload of a video
 * Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video
 */
export const uploadResumableInit = <ThrowOnError extends boolean = false>(options: Options<UploadResumableInitData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadResumableInitResponses, UploadResumableInitErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/upload-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send chunk for the resumable upload of a video
 * Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video
 */
export const uploadResumable = <ThrowOnError extends boolean = false>(options: Options<UploadResumableData, ThrowOnError>) => {
    return (options.client ?? client).put<UploadResumableResponses, UploadResumableErrors, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/upload-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options.headers
        }
    });
};

/**
 * Import a video
 * Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)
 */
export const importVideo = <ThrowOnError extends boolean = false>(options?: Options<ImportVideoData, ThrowOnError>) => {
    return (options?.client ?? client).post<ImportVideoResponses, ImportVideoErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/imports',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Cancel video import
 * Cancel a pending video import
 */
export const postApiV1VideosImportsByIdCancel = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosImportsByIdCancelData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosImportsByIdCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/imports/{id}/cancel',
        ...options
    });
};

/**
 * Delete video import
 * Delete ended video import
 */
export const deleteApiV1VideosImportsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideosImportsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideosImportsByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/imports/{id}',
        ...options
    });
};

/**
 * Create a live
 */
export const addLive = <ThrowOnError extends boolean = false>(options?: Options<AddLiveData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddLiveResponses, AddLiveErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/live',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get information about a live
 */
export const getLiveId = <ThrowOnError extends boolean = false>(options: Options<GetLiveIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLiveIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/live/{id}',
        ...options
    });
};

/**
 * Update information about a live
 */
export const updateLiveId = <ThrowOnError extends boolean = false>(options: Options<UpdateLiveIdData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateLiveIdResponses, UpdateLiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/live/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List live sessions
 * List all sessions created in a particular live
 */
export const getApiV1VideosLiveByIdSessions = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosLiveByIdSessionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosLiveByIdSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/live/{id}/sessions',
        ...options
    });
};

/**
 * Get live session of a replay
 * If the video is a replay of a live, you can find the associated live session using this endpoint
 */
export const getApiV1VideosByIdLiveSession = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdLiveSessionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdLiveSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/live-session',
        ...options
    });
};

/**
 * Get video source file metadata
 * Get metadata and download link of original video file
 */
export const getVideoSource = <ThrowOnError extends boolean = false>(options: Options<GetVideoSourceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoSourceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/source',
        ...options
    });
};

/**
 * Delete video source file
 */
export const deleteVideoSourceFile = <ThrowOnError extends boolean = false>(options: Options<DeleteVideoSourceFileData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteVideoSourceFileResponses, DeleteVideoSourceFileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/source/file',
        ...options
    });
};

/**
 * Cancel the resumable replacement of a video
 * **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the replacement of a video
 */
export const replaceVideoSourceResumableCancel = <ThrowOnError extends boolean = false>(options: Options<ReplaceVideoSourceResumableCancelData, ThrowOnError>) => {
    return (options.client ?? client).delete<ReplaceVideoSourceResumableCancelResponses, ReplaceVideoSourceResumableCancelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/source/replace-resumable',
        ...options
    });
};

/**
 * Initialize the resumable replacement of a video
 * **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the replacement of a video
 */
export const replaceVideoSourceResumableInit = <ThrowOnError extends boolean = false>(options: Options<ReplaceVideoSourceResumableInitData, ThrowOnError>) => {
    return (options.client ?? client).post<ReplaceVideoSourceResumableInitResponses, ReplaceVideoSourceResumableInitErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/source/replace-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send chunk for the resumable replacement of a video
 * **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the replacement of a video
 */
export const replaceVideoSourceResumable = <ThrowOnError extends boolean = false>(options: Options<ReplaceVideoSourceResumableData, ThrowOnError>) => {
    return (options.client ?? client).put<ReplaceVideoSourceResumableResponses, ReplaceVideoSourceResumableErrors, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/source/replace-resumable',
        ...options,
        headers: {
            'Content-Type': 'application/octet-stream',
            ...options.headers
        }
    });
};

/**
 * List my abuses
 */
export const getMyAbuses = <ThrowOnError extends boolean = false>(options?: Options<GetMyAbusesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMyAbusesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/abuses',
        ...options
    });
};

/**
 * List abuses
 */
export const getAbuses = <ThrowOnError extends boolean = false>(options?: Options<GetAbusesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAbusesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses',
        ...options
    });
};

/**
 * Report an abuse
 */
export const postApiV1Abuses = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AbusesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AbusesResponses, PostApiV1AbusesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an abuse
 */
export const deleteApiV1AbusesByAbuseId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1AbusesByAbuseIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1AbusesByAbuseIdResponses, DeleteApiV1AbusesByAbuseIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses/{abuseId}',
        ...options
    });
};

/**
 * Update an abuse
 */
export const putApiV1AbusesByAbuseId = <ThrowOnError extends boolean = false>(options: Options<PutApiV1AbusesByAbuseIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1AbusesByAbuseIdResponses, PutApiV1AbusesByAbuseIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses/{abuseId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List messages of an abuse
 */
export const getApiV1AbusesByAbuseIdMessages = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AbusesByAbuseIdMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AbusesByAbuseIdMessagesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses/{abuseId}/messages',
        ...options
    });
};

/**
 * Add message to an abuse
 */
export const postApiV1AbusesByAbuseIdMessages = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AbusesByAbuseIdMessagesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AbusesByAbuseIdMessagesResponses, PostApiV1AbusesByAbuseIdMessagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses/{abuseId}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an abuse message
 */
export const deleteApiV1AbusesByAbuseIdMessagesByAbuseMessageId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1AbusesByAbuseIdMessagesByAbuseMessageIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1AbusesByAbuseIdMessagesByAbuseMessageIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/abuses/{abuseId}/messages/{abuseMessageId}',
        ...options
    });
};

/**
 * Unblock a video by its id
 */
export const delVideoBlock = <ThrowOnError extends boolean = false>(options: Options<DelVideoBlockData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoBlockResponses, DelVideoBlockErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/blacklist',
        ...options
    });
};

/**
 * Block a video
 */
export const addVideoBlock = <ThrowOnError extends boolean = false>(options: Options<AddVideoBlockData, ThrowOnError>) => {
    return (options.client ?? client).post<AddVideoBlockResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/blacklist',
        ...options
    });
};

/**
 * List video blocks
 */
export const getVideoBlocks = <ThrowOnError extends boolean = false>(options?: Options<GetVideoBlocksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVideoBlocksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/blacklist',
        ...options
    });
};

/**
 * List storyboards of a video
 * **PeerTube >= 6.0**
 */
export const listVideoStoryboards = <ThrowOnError extends boolean = false>(options: Options<ListVideoStoryboardsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListVideoStoryboardsResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/storyboards',
        ...options
    });
};

/**
 * List captions of a video
 */
export const getVideoCaptions = <ThrowOnError extends boolean = false>(options: Options<GetVideoCaptionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoCaptionsResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/captions',
        ...options
    });
};

/**
 * Generate a video caption
 * **PeerTube >= 6.2** This feature has to be enabled by the administrator
 */
export const generateVideoCaption = <ThrowOnError extends boolean = false>(options: Options<GenerateVideoCaptionData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateVideoCaptionResponses, GenerateVideoCaptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/captions/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a video caption
 */
export const delVideoCaption = <ThrowOnError extends boolean = false>(options: Options<DelVideoCaptionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoCaptionResponses, DelVideoCaptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/captions/{captionLanguage}',
        ...options
    });
};

/**
 * Add or replace a video caption
 */
export const addVideoCaption = <ThrowOnError extends boolean = false>(options: Options<AddVideoCaptionData, ThrowOnError>) => {
    return (options.client ?? client).put<AddVideoCaptionResponses, AddVideoCaptionErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/captions/{captionLanguage}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get chapters of a video
 * **PeerTube >= 6.0**
 */
export const getVideoChapters = <ThrowOnError extends boolean = false>(options: Options<GetVideoChaptersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoChaptersResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/chapters',
        ...options
    });
};

/**
 * Replace video chapters
 * **PeerTube >= 6.0**
 */
export const replaceVideoChapters = <ThrowOnError extends boolean = false>(options: Options<ReplaceVideoChaptersData, ThrowOnError>) => {
    return (options.client ?? client).put<ReplaceVideoChaptersResponses, ReplaceVideoChaptersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/chapters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List video passwords
 * **PeerTube >= 6.0**
 */
export const getApiV1VideosByIdPasswords = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdPasswordsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdPasswordsResponses, GetApiV1VideosByIdPasswordsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/passwords',
        ...options
    });
};

/**
 * Update video passwords
 * **PeerTube >= 6.0**
 */
export const putApiV1VideosByIdPasswords = <ThrowOnError extends boolean = false>(options: Options<PutApiV1VideosByIdPasswordsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1VideosByIdPasswordsResponses, PutApiV1VideosByIdPasswordsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/passwords',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a video password
 * **PeerTube >= 6.0**
 */
export const deleteApiV1VideosByIdPasswordsByVideoPasswordId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideosByIdPasswordsByVideoPasswordIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideosByIdPasswordsByVideoPasswordIdResponses, DeleteApiV1VideosByIdPasswordsByVideoPasswordIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/passwords/{videoPasswordId}',
        ...options
    });
};

/**
 * List video channels
 */
export const getVideoChannels = <ThrowOnError extends boolean = false>(options?: Options<GetVideoChannelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVideoChannelsResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-channels',
        ...options
    });
};

/**
 * Create a video channel
 */
export const addVideoChannel = <ThrowOnError extends boolean = false>(options?: Options<AddVideoChannelData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddVideoChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a video channel
 */
export const delVideoChannel = <ThrowOnError extends boolean = false>(options: Options<DelVideoChannelData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}',
        ...options
    });
};

/**
 * Get a video channel
 */
export const getVideoChannel = <ThrowOnError extends boolean = false>(options: Options<GetVideoChannelData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoChannelResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-channels/{channelHandle}',
        ...options
    });
};

/**
 * Update a video channel
 */
export const putVideoChannel = <ThrowOnError extends boolean = false>(options: Options<PutVideoChannelData, ThrowOnError>) => {
    return (options.client ?? client).put<PutVideoChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List videos of a video channel
 */
export const getVideoChannelVideos = <ThrowOnError extends boolean = false>(options: Options<GetVideoChannelVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoChannelVideosResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-channels/{channelHandle}/videos',
        ...options
    });
};

/**
 * List playlists of a channel
 */
export const getApiV1VideoChannelsByChannelHandleVideoPlaylists = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideoChannelsByChannelHandleVideoPlaylistsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideoChannelsByChannelHandleVideoPlaylistsResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-channels/{channelHandle}/video-playlists',
        ...options
    });
};

/**
 * Reorder channel playlists
 */
export const reorderVideoPlaylistsOfChannel = <ThrowOnError extends boolean = false>(options: Options<ReorderVideoPlaylistsOfChannelData, ThrowOnError>) => {
    return (options.client ?? client).post<ReorderVideoPlaylistsOfChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/video-playlists/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List followers of a video channel
 */
export const getVideoChannelFollowers = <ThrowOnError extends boolean = false>(options: Options<GetVideoChannelFollowersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoChannelFollowersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/followers',
        ...options
    });
};

/**
 * Update channel avatar
 */
export const postApiV1VideoChannelsByChannelHandleAvatarPick = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideoChannelsByChannelHandleAvatarPickData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideoChannelsByChannelHandleAvatarPickResponses, PostApiV1VideoChannelsByChannelHandleAvatarPickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/avatar/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete channel avatar
 */
export const deleteApiV1VideoChannelsByChannelHandleAvatar = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideoChannelsByChannelHandleAvatarData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideoChannelsByChannelHandleAvatarResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/avatar',
        ...options
    });
};

/**
 * Update channel banner
 */
export const postApiV1VideoChannelsByChannelHandleBannerPick = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideoChannelsByChannelHandleBannerPickData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideoChannelsByChannelHandleBannerPickResponses, PostApiV1VideoChannelsByChannelHandleBannerPickErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/banner/pick',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete channel banner
 */
export const deleteApiV1VideoChannelsByChannelHandleBanner = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideoChannelsByChannelHandleBannerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideoChannelsByChannelHandleBannerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/banner',
        ...options
    });
};

/**
 * Import videos in channel
 * Import a remote channel/playlist videos into a channel
 */
export const postApiV1VideoChannelsByChannelHandleImportVideos = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideoChannelsByChannelHandleImportVideosData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideoChannelsByChannelHandleImportVideosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channels/{channelHandle}/import-videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a synchronization for a video channel
 */
export const addVideoChannelSync = <ThrowOnError extends boolean = false>(options?: Options<AddVideoChannelSyncData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddVideoChannelSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channel-syncs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a video channel synchronization
 */
export const delVideoChannelSync = <ThrowOnError extends boolean = false>(options: Options<DelVideoChannelSyncData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoChannelSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channel-syncs/{channelSyncId}',
        ...options
    });
};

/**
 * Triggers the channel synchronization job, fetching all the videos from the remote channel
 */
export const triggerVideoChannelSync = <ThrowOnError extends boolean = false>(options: Options<TriggerVideoChannelSyncData, ThrowOnError>) => {
    return (options.client ?? client).post<TriggerVideoChannelSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-channel-syncs/{channelSyncId}/sync',
        ...options
    });
};

/**
 * Get video player settings
 * Get player settings for a specific video. Returns video-specific settings merged with channel player settings.
 */
export const getVideoPlayerSettings = <ThrowOnError extends boolean = false>(options: Options<GetVideoPlayerSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoPlayerSettingsResponses, GetVideoPlayerSettingsErrors, ThrowOnError>({
        url: '/api/v1/player-settings/videos/{id}',
        ...options
    });
};

/**
 * Update video player settings
 * Update player settings for a specific video
 */
export const updateVideoPlayerSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateVideoPlayerSettingsData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateVideoPlayerSettingsResponses, UpdateVideoPlayerSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/player-settings/videos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get channel player settings
 * Get player settings for a video channel.
 */
export const getChannelPlayerSettings = <ThrowOnError extends boolean = false>(options: Options<GetChannelPlayerSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetChannelPlayerSettingsResponses, GetChannelPlayerSettingsErrors, ThrowOnError>({
        url: '/api/v1/player-settings/video-channels/{channelHandle}',
        ...options
    });
};

/**
 * Update channel player settings
 * Update default player settings for a video channel.
 */
export const updateChannelPlayerSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateChannelPlayerSettingsData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateChannelPlayerSettingsResponses, UpdateChannelPlayerSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/player-settings/video-channels/{channelHandle}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List available playlist privacy policies
 */
export const getPlaylistPrivacyPolicies = <ThrowOnError extends boolean = false>(options?: Options<GetPlaylistPrivacyPoliciesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlaylistPrivacyPoliciesResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-playlists/privacies',
        ...options
    });
};

/**
 * List video playlists
 */
export const getPlaylists = <ThrowOnError extends boolean = false>(options?: Options<GetPlaylistsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlaylistsResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-playlists',
        ...options
    });
};

/**
 * Create a video playlist
 * If the video playlist is set as public, `videoChannelId` is mandatory.
 */
export const addPlaylist = <ThrowOnError extends boolean = false>(options?: Options<AddPlaylistData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddPlaylistResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete a video playlist
 */
export const deleteApiV1VideoPlaylistsByPlaylistId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideoPlaylistsByPlaylistIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideoPlaylistsByPlaylistIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}',
        ...options
    });
};

/**
 * Get a video playlist
 */
export const getApiV1VideoPlaylistsByPlaylistId = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideoPlaylistsByPlaylistIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideoPlaylistsByPlaylistIdResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-playlists/{playlistId}',
        ...options
    });
};

/**
 * Update a video playlist
 * If the video playlist is set as public, the playlist must have a assigned channel.
 */
export const putApiV1VideoPlaylistsByPlaylistId = <ThrowOnError extends boolean = false>(options: Options<PutApiV1VideoPlaylistsByPlaylistIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1VideoPlaylistsByPlaylistIdResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List videos of a playlist
 */
export const getVideoPlaylistVideos = <ThrowOnError extends boolean = false>(options: Options<GetVideoPlaylistVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVideoPlaylistVideosResponses, unknown, ThrowOnError>({
        url: '/api/v1/video-playlists/{playlistId}/videos',
        ...options
    });
};

/**
 * Add a video in a playlist
 */
export const addVideoPlaylistVideo = <ThrowOnError extends boolean = false>(options: Options<AddVideoPlaylistVideoData, ThrowOnError>) => {
    return (options.client ?? client).post<AddVideoPlaylistVideoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}/videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reorder playlist elements
 */
export const reorderVideoPlaylist = <ThrowOnError extends boolean = false>(options: Options<ReorderVideoPlaylistData, ThrowOnError>) => {
    return (options.client ?? client).post<ReorderVideoPlaylistResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}/videos/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an element from a playlist
 */
export const delVideoPlaylistVideo = <ThrowOnError extends boolean = false>(options: Options<DelVideoPlaylistVideoData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoPlaylistVideoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}',
        ...options
    });
};

/**
 * Update a playlist element
 */
export const putVideoPlaylistVideo = <ThrowOnError extends boolean = false>(options: Options<PutVideoPlaylistVideoData, ThrowOnError>) => {
    return (options.client ?? client).put<PutVideoPlaylistVideoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check video exists in my playlists
 */
export const getApiV1UsersMeVideoPlaylistsVideosExist = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersMeVideoPlaylistsVideosExistData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1UsersMeVideoPlaylistsVideosExistResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/video-playlists/videos-exist',
        ...options
    });
};

/**
 * List playlists of an account
 */
export const getApiV1AccountsByNameVideoPlaylists = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsByNameVideoPlaylistsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AccountsByNameVideoPlaylistsResponses, unknown, ThrowOnError>({
        url: '/api/v1/accounts/{name}/video-playlists',
        ...options
    });
};

/**
 * List video channels of an account
 */
export const getApiV1AccountsByNameVideoChannels = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsByNameVideoChannelsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AccountsByNameVideoChannelsResponses, unknown, ThrowOnError>({
        url: '/api/v1/accounts/{name}/video-channels',
        ...options
    });
};

/**
 * List the synchronizations of video channels of an account
 */
export const getApiV1AccountsByNameVideoChannelSyncs = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsByNameVideoChannelSyncsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AccountsByNameVideoChannelSyncsResponses, unknown, ThrowOnError>({
        url: '/api/v1/accounts/{name}/video-channel-syncs',
        ...options
    });
};

/**
 * List ratings of an account
 */
export const getApiV1AccountsByNameRatings = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsByNameRatingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AccountsByNameRatingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/{name}/ratings',
        ...options
    });
};

/**
 * List threads of a video
 */
export const getApiV1VideosByIdCommentThreads = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdCommentThreadsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdCommentThreadsResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/comment-threads',
        ...options
    });
};

/**
 * Create a thread
 */
export const postApiV1VideosByIdCommentThreads = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosByIdCommentThreadsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosByIdCommentThreadsResponses, PostApiV1VideosByIdCommentThreadsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/comment-threads',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a thread
 */
export const getApiV1VideosByIdCommentThreadsByThreadId = <ThrowOnError extends boolean = false>(options: Options<GetApiV1VideosByIdCommentThreadsByThreadIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1VideosByIdCommentThreadsByThreadIdResponses, unknown, ThrowOnError>({
        url: '/api/v1/videos/{id}/comment-threads/{threadId}',
        ...options
    });
};

/**
 * List instance comments
 */
export const getApiV1VideosComments = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1VideosCommentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1VideosCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/comments',
        ...options
    });
};

/**
 * Delete a comment or a reply
 */
export const deleteApiV1VideosByIdCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1VideosByIdCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1VideosByIdCommentsByCommentIdResponses, DeleteApiV1VideosByIdCommentsByCommentIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/comments/{commentId}',
        ...options
    });
};

/**
 * Reply to a thread of a video
 */
export const postApiV1VideosByIdCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosByIdCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosByIdCommentsByCommentIdResponses, PostApiV1VideosByIdCommentsByCommentIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/comments/{commentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Approve a comment
 * **PeerTube >= 6.2** Approve a comment that requires a review
 */
export const postApiV1VideosByIdCommentsByCommentIdApprove = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VideosByIdCommentsByCommentIdApproveData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1VideosByIdCommentsByCommentIdApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/comments/{commentId}/approve',
        ...options
    });
};

/**
 * Like/dislike a video
 */
export const putApiV1VideosByIdRate = <ThrowOnError extends boolean = false>(options: Options<PutApiV1VideosByIdRateData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1VideosByIdRateResponses, PutApiV1VideosByIdRateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/rate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete video HLS files
 */
export const delVideoHls = <ThrowOnError extends boolean = false>(options: Options<DelVideoHlsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoHlsResponses, DelVideoHlsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/hls',
        ...options
    });
};

/**
 * Delete video Web Video files
 * **PeerTube >= 6.0**
 */
export const delVideoWebVideos = <ThrowOnError extends boolean = false>(options: Options<DelVideoWebVideosData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelVideoWebVideosResponses, DelVideoWebVideosErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/web-videos',
        ...options
    });
};

/**
 * Create a transcoding job
 */
export const createVideoTranscoding = <ThrowOnError extends boolean = false>(options: Options<CreateVideoTranscodingData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateVideoTranscodingResponses, CreateVideoTranscodingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/videos/{id}/transcoding',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search videos
 */
export const searchVideos = <ThrowOnError extends boolean = false>(options: Options<SearchVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchVideosResponses, SearchVideosErrors, ThrowOnError>({
        url: '/api/v1/search/videos',
        ...options
    });
};

/**
 * Search channels
 */
export const searchChannels = <ThrowOnError extends boolean = false>(options: Options<SearchChannelsData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchChannelsResponses, SearchChannelsErrors, ThrowOnError>({
        url: '/api/v1/search/video-channels',
        ...options
    });
};

/**
 * Search playlists
 */
export const searchPlaylists = <ThrowOnError extends boolean = false>(options: Options<SearchPlaylistsData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchPlaylistsResponses, SearchPlaylistsErrors, ThrowOnError>({
        url: '/api/v1/search/video-playlists',
        ...options
    });
};

/**
 * Get block status of accounts/hosts
 */
export const getApiV1BlocklistStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1BlocklistStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1BlocklistStatusResponses, unknown, ThrowOnError>({
        url: '/api/v1/blocklist/status',
        ...options
    });
};

/**
 * List account blocks
 */
export const getApiV1ServerBlocklistAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ServerBlocklistAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1ServerBlocklistAccountsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/accounts',
        ...options
    });
};

/**
 * Block an account
 */
export const postApiV1ServerBlocklistAccounts = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ServerBlocklistAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1ServerBlocklistAccountsResponses, PostApiV1ServerBlocklistAccountsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unblock an account by its handle
 */
export const deleteApiV1ServerBlocklistAccountsByAccountName = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ServerBlocklistAccountsByAccountNameData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1ServerBlocklistAccountsByAccountNameResponses, DeleteApiV1ServerBlocklistAccountsByAccountNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/accounts/{accountName}',
        ...options
    });
};

/**
 * List server blocks
 */
export const getApiV1ServerBlocklistServers = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ServerBlocklistServersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1ServerBlocklistServersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/servers',
        ...options
    });
};

/**
 * Block a server
 */
export const postApiV1ServerBlocklistServers = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ServerBlocklistServersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1ServerBlocklistServersResponses, PostApiV1ServerBlocklistServersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unblock a server by its domain
 */
export const deleteApiV1ServerBlocklistServersByHost = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ServerBlocklistServersByHostData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1ServerBlocklistServersByHostResponses, DeleteApiV1ServerBlocklistServersByHostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/blocklist/servers/{host}',
        ...options
    });
};

/**
 * Update a server redundancy policy
 */
export const putApiV1ServerRedundancyByHost = <ThrowOnError extends boolean = false>(options: Options<PutApiV1ServerRedundancyByHostData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1ServerRedundancyByHostResponses, PutApiV1ServerRedundancyByHostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/redundancy/{host}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List videos being mirrored
 */
export const getMirroredVideos = <ThrowOnError extends boolean = false>(options: Options<GetMirroredVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMirroredVideosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/redundancy/videos',
        ...options
    });
};

/**
 * Mirror a video
 */
export const putMirroredVideo = <ThrowOnError extends boolean = false>(options?: Options<PutMirroredVideoData, ThrowOnError>) => {
    return (options?.client ?? client).post<PutMirroredVideoResponses, PutMirroredVideoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/redundancy/videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a mirror done on a video
 */
export const delMirroredVideo = <ThrowOnError extends boolean = false>(options: Options<DelMirroredVideoData, ThrowOnError>) => {
    return (options.client ?? client).delete<DelMirroredVideoResponses, DelMirroredVideoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/redundancy/videos/{redundancyId}',
        ...options
    });
};

/**
 * Get instance stats
 * Get instance public statistics. This endpoint is cached.
 */
export const getInstanceStats = <ThrowOnError extends boolean = false>(options?: Options<GetInstanceStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInstanceStatsResponses, unknown, ThrowOnError>({
        url: '/api/v1/server/stats',
        ...options
    });
};

/**
 * Send client log
 */
export const sendClientLog = <ThrowOnError extends boolean = false>(options?: Options<SendClientLogData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendClientLogResponses, unknown, ThrowOnError>({
        url: '/api/v1/server/logs/client',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get instance logs
 */
export const getInstanceLogs = <ThrowOnError extends boolean = false>(options?: Options<GetInstanceLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInstanceLogsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/logs',
        ...options
    });
};

/**
 * Get instance audit logs
 */
export const getInstanceAuditLogs = <ThrowOnError extends boolean = false>(options?: Options<GetInstanceAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInstanceAuditLogsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/server/audit-logs',
        ...options
    });
};

/**
 * List plugins
 */
export const getPlugins = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins',
        ...options
    });
};

/**
 * List available plugins
 */
export const getAvailablePlugins = <ThrowOnError extends boolean = false>(options?: Options<GetAvailablePluginsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvailablePluginsResponses, GetAvailablePluginsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/available',
        ...options
    });
};

/**
 * Install a plugin
 */
export const addPlugin = <ThrowOnError extends boolean = false>(options?: Options<AddPluginData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddPluginResponses, AddPluginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/install',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a plugin
 */
export const updatePlugin = <ThrowOnError extends boolean = false>(options?: Options<UpdatePluginData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdatePluginResponses, UpdatePluginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Uninstall a plugin
 */
export const uninstallPlugin = <ThrowOnError extends boolean = false>(options?: Options<UninstallPluginData, ThrowOnError>) => {
    return (options?.client ?? client).post<UninstallPluginResponses, UninstallPluginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/uninstall',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a plugin
 */
export const getPlugin = <ThrowOnError extends boolean = false>(options: Options<GetPluginData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPluginResponses, GetPluginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/{npmName}',
        ...options
    });
};

/**
 * Set a plugin's settings
 */
export const putApiV1PluginsByNpmNameSettings = <ThrowOnError extends boolean = false>(options: Options<PutApiV1PluginsByNpmNameSettingsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1PluginsByNpmNameSettingsResponses, PutApiV1PluginsByNpmNameSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/{npmName}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a plugin's public settings
 */
export const getApiV1PluginsByNpmNamePublicSettings = <ThrowOnError extends boolean = false>(options: Options<GetApiV1PluginsByNpmNamePublicSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1PluginsByNpmNamePublicSettingsResponses, GetApiV1PluginsByNpmNamePublicSettingsErrors, ThrowOnError>({
        url: '/api/v1/plugins/{npmName}/public-settings',
        ...options
    });
};

/**
 * Get a plugin's registered settings
 */
export const getApiV1PluginsByNpmNameRegisteredSettings = <ThrowOnError extends boolean = false>(options: Options<GetApiV1PluginsByNpmNameRegisteredSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1PluginsByNpmNameRegisteredSettingsResponses, GetApiV1PluginsByNpmNameRegisteredSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/plugins/{npmName}/registered-settings',
        ...options
    });
};

/**
 * Create playback metrics
 * These metrics are exposed by OpenTelemetry metrics exporter if enabled.
 */
export const postApiV1MetricsPlayback = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1MetricsPlaybackData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1MetricsPlaybackResponses, unknown, ThrowOnError>({
        url: '/api/v1/metrics/playback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate registration token
 * Generate a new runner registration token
 */
export const postApiV1RunnersRegistrationTokensGenerate = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1RunnersRegistrationTokensGenerateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1RunnersRegistrationTokensGenerateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/registration-tokens/generate',
        ...options
    });
};

/**
 * Remove registration token
 * Remove a registration token. Runners that used this token for their registration are automatically removed.
 */
export const deleteApiV1RunnersRegistrationTokensByRegistrationTokenId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1RunnersRegistrationTokensByRegistrationTokenIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1RunnersRegistrationTokensByRegistrationTokenIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/registration-tokens/{registrationTokenId}',
        ...options
    });
};

/**
 * List registration tokens
 */
export const getApiV1RunnersRegistrationTokens = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1RunnersRegistrationTokensData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1RunnersRegistrationTokensResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/registration-tokens',
        ...options
    });
};

/**
 * Register a new runner
 * API used by PeerTube runners
 */
export const postApiV1RunnersRegister = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1RunnersRegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1RunnersRegisterResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unregister a runner
 * API used by PeerTube runners
 */
export const postApiV1RunnersUnregister = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1RunnersUnregisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1RunnersUnregisterResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/unregister',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a runner
 */
export const deleteApiV1RunnersByRunnerId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1RunnersByRunnerIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1RunnersByRunnerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/{runnerId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List runners
 */
export const getApiV1Runners = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1RunnersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1RunnersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners',
        ...options
    });
};

/**
 * Request a new job
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsRequest = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1RunnersJobsRequestData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1RunnersJobsRequestResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept job
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsByJobUuidAccept = <ThrowOnError extends boolean = false>(options: Options<PostApiV1RunnersJobsByJobUuidAcceptData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1RunnersJobsByJobUuidAcceptResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/{jobUUID}/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Abort job
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsByJobUuidAbort = <ThrowOnError extends boolean = false>(options: Options<PostApiV1RunnersJobsByJobUuidAbortData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1RunnersJobsByJobUuidAbortResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/{jobUUID}/abort',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update job
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsByJobUuidUpdate = <ThrowOnError extends boolean = false>(options: Options<PostApiV1RunnersJobsByJobUuidUpdateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1RunnersJobsByJobUuidUpdateResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/{jobUUID}/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Post job error
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsByJobUuidError = <ThrowOnError extends boolean = false>(options: Options<PostApiV1RunnersJobsByJobUuidErrorData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1RunnersJobsByJobUuidErrorResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/{jobUUID}/error',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Post job success
 * API used by PeerTube runners
 */
export const postApiV1RunnersJobsByJobUuidSuccess = <ThrowOnError extends boolean = false>(options: Options<PostApiV1RunnersJobsByJobUuidSuccessData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1RunnersJobsByJobUuidSuccessResponses, unknown, ThrowOnError>({
        url: '/api/v1/runners/jobs/{jobUUID}/success',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel a job
 */
export const getApiV1RunnersJobsByJobUuidCancel = <ThrowOnError extends boolean = false>(options: Options<GetApiV1RunnersJobsByJobUuidCancelData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1RunnersJobsByJobUuidCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/jobs/{jobUUID}/cancel',
        ...options
    });
};

/**
 * Delete a job
 * The endpoint will first cancel the job if needed, and then remove it from the database. Children jobs will also be removed
 */
export const deleteApiV1RunnersJobsByJobUuid = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1RunnersJobsByJobUuidData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1RunnersJobsByJobUuidResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/jobs/{jobUUID}',
        ...options
    });
};

/**
 * List jobs
 */
export const getApiV1RunnersJobs = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1RunnersJobsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1RunnersJobsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runners/jobs',
        ...options
    });
};

/**
 * Get account auto tag policies on comments
 * **PeerTube >= 6.2**
 */
export const getApiV1AutomaticTagsPoliciesAccountsByAccountNameComments = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/automatic-tags/policies/accounts/{accountName}/comments',
        ...options
    });
};

/**
 * Update account auto tag policies on comments
 * **PeerTube >= 6.2**
 */
export const putApiV1AutomaticTagsPoliciesAccountsByAccountNameComments = <ThrowOnError extends boolean = false>(options: Options<PutApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1AutomaticTagsPoliciesAccountsByAccountNameCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/automatic-tags/policies/accounts/{accountName}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get account available auto tags
 * **PeerTube >= 6.2**
 */
export const getApiV1AutomaticTagsAccountsByAccountNameAvailable = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AutomaticTagsAccountsByAccountNameAvailableData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1AutomaticTagsAccountsByAccountNameAvailableResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/automatic-tags/accounts/{accountName}/available',
        ...options
    });
};

/**
 * Get server available auto tags
 * **PeerTube >= 6.2**
 */
export const getApiV1AutomaticTagsServerAvailable = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AutomaticTagsServerAvailableData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1AutomaticTagsServerAvailableResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/automatic-tags/server/available',
        ...options
    });
};

/**
 * List account watched words
 * **PeerTube >= 6.2**
 */
export const getApiV1WatchedWordsAccountsByAccountNameLists = <ThrowOnError extends boolean = false>(options: Options<GetApiV1WatchedWordsAccountsByAccountNameListsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiV1WatchedWordsAccountsByAccountNameListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/accounts/{accountName}/lists',
        ...options
    });
};

/**
 * Add account watched words
 * **PeerTube >= 6.2**
 */
export const postApiV1WatchedWordsAccountsByAccountNameLists = <ThrowOnError extends boolean = false>(options: Options<PostApiV1WatchedWordsAccountsByAccountNameListsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1WatchedWordsAccountsByAccountNameListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/accounts/{accountName}/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete account watched words
 * **PeerTube >= 6.2**
 */
export const deleteApiV1WatchedWordsAccountsByAccountNameListsByListId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1WatchedWordsAccountsByAccountNameListsByListIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1WatchedWordsAccountsByAccountNameListsByListIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/accounts/{accountName}/lists/{listId}',
        ...options
    });
};

/**
 * Update account watched words
 * **PeerTube >= 6.2**
 */
export const putApiV1WatchedWordsAccountsByAccountNameListsByListId = <ThrowOnError extends boolean = false>(options: Options<PutApiV1WatchedWordsAccountsByAccountNameListsByListIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1WatchedWordsAccountsByAccountNameListsByListIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/accounts/{accountName}/lists/{listId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List server watched words
 * **PeerTube >= 6.2**
 */
export const getApiV1WatchedWordsServerLists = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1WatchedWordsServerListsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1WatchedWordsServerListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/server/lists',
        ...options
    });
};

/**
 * Add server watched words
 * **PeerTube >= 6.2**
 */
export const postApiV1WatchedWordsServerLists = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1WatchedWordsServerListsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1WatchedWordsServerListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/server/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete server watched words
 * **PeerTube >= 6.2**
 */
export const deleteApiV1WatchedWordsServerListsByListId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1WatchedWordsServerListsByListIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiV1WatchedWordsServerListsByListIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/server/lists/{listId}',
        ...options
    });
};

/**
 * Update server watched words
 * **PeerTube >= 6.2**
 */
export const putApiV1WatchedWordsServerListsByListId = <ThrowOnError extends boolean = false>(options: Options<PutApiV1WatchedWordsServerListsByListIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiV1WatchedWordsServerListsByListIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/watched-words/server/lists/{listId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update client language
 * Set a cookie so that, the next time the client refreshes the HTML of the web interface, PeerTube will use the next language
 */
export const updateClientLanguage = <ThrowOnError extends boolean = false>(options?: Options<UpdateClientLanguageData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateClientLanguageResponses, unknown, ThrowOnError>({
        url: '/api/v1/client-config/update-language',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
